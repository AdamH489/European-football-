import numpy as np
import pandas as pd
import sqlite3
import matplotlib.pyplot as plt

database_path = "C:/Users/User/OneDrive/Email attachments/Documents/Personal work/Employment/Project data/database.sqlite"

# Connect to the SQLite database
conn = sqlite3.connect(database_path)

# Run a SQL query to get a list of tables in the database
tables = pd.read_sql("SELECT name FROM sqlite_master WHERE type='table';", conn)

# Print the list of tables
print(tables)

# Get a list of countries in the database
countries = pd.read_sql("SELECT * FROM Country;", conn)

# Print the list of countries
print(countries)

# Join 'League' and 'Country' tables and join them based on the 'country_id' field
leagues = pd.read_sql("""SELECT *
                        FROM League
                        JOIN Country ON Country.id = League.country_id;""", conn)

# Print the final joined table
print(leagues)

# Retrieve 'Team' table and order the results by 'team_long_name' and limit output to the first 10 rows
teams = pd.read_sql("""SELECT *
                        FROM Team
                        ORDER BY team_long_name
                        LIMIT 10;""", conn)

# Print team output
print(teams)

# Query to retrieve detailed match information for matches in Spain
detailed_matches = pd.read_sql("""SELECT Match.id, 
                                        Country.name AS country_name, 
                                        League.name AS league_name, 
                                        season, 
                                        stage, 
                                        date,
                                        HT.team_long_name AS home_team,
                                        AT.team_long_name AS away_team,
                                        home_team_goal, 
                                        away_team_goal                                        
                                FROM Match
                                JOIN Country ON Country.id = Match.country_id
                                JOIN League ON League.id = Match.league_id
                                LEFT JOIN Team AS HT ON HT.team_api_id = Match.home_team_api_id
                                LEFT JOIN Team AS AT ON AT.team_api_id = Match.away_team_api_id
                                WHERE country_name = 'Spain'
                                ORDER BY date
                                LIMIT 10;""", conn)

# Print output
print(detailed_matches)

# Query to retrieve statistics about football leagues by season
leagues_by_season = pd.read_sql("""
    SELECT
        Country.name AS country_name,
        League.name AS league_name,
        season,
        COUNT(DISTINCT stage) AS number_of_stages,
        COUNT(DISTINCT HT.team_long_name) AS number_of_teams,
        AVG(home_team_goal) AS avg_home_team_scores,
        AVG(away_team_goal) AS avg_away_team_goals,
        AVG(home_team_goal - away_team_goal) AS avg_goal_difference,
        AVG(home_team_goal + away_team_goal) AS avg_goals,
        SUM(home_team_goal + away_team_goal) AS total_goals
    FROM Match
    JOIN Country ON Country.id = Match.country_id
    JOIN League ON League.id = Match.league_id
    LEFT JOIN Team AS HT ON HT.team_api_id = Match.home_team_api_id
    LEFT JOIN Team AS AT ON AT.team_api_id = Match.away_team_api_id
    WHERE country_name IN ('Spain', 'Germany', 'France', 'Italy', 'England')
    GROUP BY Country.name, League.name, season
    HAVING COUNT(DISTINCT stage) > 10
    ORDER BY Country.name, League.name, season DESC;
""", conn)

# Display the results in a Pandas DataFrame
print(leagues_by_season)

# Create a DataFrame with 'season' as the index and 'country_name' as columns
df = pd.DataFrame(index=np.sort(leagues_by_season['season'].unique()), columns=leagues_by_season['country_name'].unique())

# Fill the DataFrame with average goals data for each country
df.loc[:, 'Germany'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'Germany', 'avg_goals'])
df.loc[:, 'Spain'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'Spain', 'avg_goals'])
df.loc[:, 'France'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'France', 'avg_goals'])
df.loc[:, 'Italy'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'Italy', 'avg_goals'])
df.loc[:, 'England'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'England', 'avg_goals'])

# Plot the data using a line chart with specified colors
ax = df.plot(figsize=(12, 5), title='Average Goals per Game Over Time')
ax.set_prop_cycle('color', ['blue', 'orange', 'green', 'red', 'purple'])  # Change colors for each line
plt.show()

# Create a DataFrame to store average goal differences for different countries and seasons
df = pd.DataFrame(index=np.sort(leagues_by_season['season'].unique()), columns=leagues_by_season['country_name'].unique())

# Fill the DataFrame with average goal differences for specific countries
df.loc[:, 'Germany'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'Germany', 'avg_goal_difference'])
df.loc[:, 'Spain'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'Spain', 'avg_goal_difference'])
df.loc[:, 'France'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'France', 'avg_goal_difference'])
df.loc[:, 'Italy'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'Italy', 'avg_goal_difference'])
df.loc[:, 'England'] = list(leagues_by_season.loc[leagues_by_season['country_name'] == 'England', 'avg_goal_difference'])

# Plot the data using a line chart with specified colors
ax = df.plot(figsize=(12, 5), title='Average Goals Difference Home vs Out')
ax.set_prop_cycle('color', ['blue', 'orange', 'green', 'red', 'purple'])  # Change colors for each line
plt.show()

# Query to calculate player data by height ranges
players_height = pd.read_sql("""
    SELECT
        CASE
            WHEN ROUND(height) < 165 THEN 165
            WHEN ROUND(height) > 195 THEN 195
            ELSE ROUND(height)
        END AS calc_height, 
        COUNT(height) AS distribution, 
        AVG(PA_Grouped.avg_overall_rating) AS avg_overall_rating,
        AVG(PA_Grouped.avg_potential) AS avg_potential,
        AVG(weight) AS avg_weight
    FROM PLAYER
    LEFT JOIN (
        SELECT Player_Attributes.player_api_id, 
            AVG(Player_Attributes.overall_rating) AS avg_overall_rating,
            AVG(Player_Attributes.potential) AS avg_potential  
        FROM Player_Attributes
        GROUP BY Player_Attributes.player_api_id
    ) AS PA_Grouped ON PLAYER.player_api_id = PA_Grouped.player_api_id
    GROUP BY calc_height
    ORDER BY calc_height;
""", conn)

# Print the result
print(players_height)

# Plotting the relationship between average overall rating and height ranges
players_height.plot(x='calc_height', y='avg_overall_rating', figsize=(12, 5), title='Potential vs Height')
plt.show()




